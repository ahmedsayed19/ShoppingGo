
barcode_first.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000053a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000053a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000122d  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b0  00000000  00000000  000018d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008cf  00000000  00000000  00002185  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  00002a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000481  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aed  00000000  00000000  00003111  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003bfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ee 01 	call	0x3dc	; 0x3dc <main>
  64:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SET_BIN_DIR>:
		case DIO_PORTC:
		PORTC=val;
		break;
		
		case DIO_PORTD:
		PORTD=val;
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	a1 f5       	brne	.+104    	; 0xd8 <DIO_SET_BIN_DIR+0x6c>
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	89 f0       	breq	.+34     	; 0x96 <DIO_SET_BIN_DIR+0x2a>
  74:	28 f0       	brcs	.+10     	; 0x80 <DIO_SET_BIN_DIR+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	c9 f0       	breq	.+50     	; 0xac <DIO_SET_BIN_DIR+0x40>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	11 f1       	breq	.+68     	; 0xc2 <DIO_SET_BIN_DIR+0x56>
  7e:	08 95       	ret
  80:	2a b3       	in	r18, 0x1a	; 26
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <DIO_SET_BIN_DIR+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <DIO_SET_BIN_DIR+0x1c>
  90:	82 2b       	or	r24, r18
  92:	8a bb       	out	0x1a, r24	; 26
  94:	08 95       	ret
  96:	27 b3       	in	r18, 0x17	; 23
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SET_BIN_DIR+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SET_BIN_DIR+0x32>
  a6:	82 2b       	or	r24, r18
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	08 95       	ret
  ac:	24 b3       	in	r18, 0x14	; 20
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SET_BIN_DIR+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SET_BIN_DIR+0x48>
  bc:	82 2b       	or	r24, r18
  be:	84 bb       	out	0x14, r24	; 20
  c0:	08 95       	ret
  c2:	21 b3       	in	r18, 0x11	; 17
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SET_BIN_DIR+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SET_BIN_DIR+0x5e>
  d2:	82 2b       	or	r24, r18
  d4:	81 bb       	out	0x11, r24	; 17
  d6:	08 95       	ret
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	91 f0       	breq	.+36     	; 0x100 <DIO_SET_BIN_DIR+0x94>
  dc:	28 f0       	brcs	.+10     	; 0xe8 <DIO_SET_BIN_DIR+0x7c>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	d9 f0       	breq	.+54     	; 0x118 <DIO_SET_BIN_DIR+0xac>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	29 f1       	breq	.+74     	; 0x130 <DIO_SET_BIN_DIR+0xc4>
  e6:	08 95       	ret
  e8:	2a b3       	in	r18, 0x1a	; 26
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_SET_BIN_DIR+0x88>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_SET_BIN_DIR+0x84>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	8a bb       	out	0x1a, r24	; 26
  fe:	08 95       	ret
 100:	27 b3       	in	r18, 0x17	; 23
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_SET_BIN_DIR+0xa0>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_SET_BIN_DIR+0x9c>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	87 bb       	out	0x17, r24	; 23
 116:	08 95       	ret
 118:	24 b3       	in	r18, 0x14	; 20
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_SET_BIN_DIR+0xb8>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_SET_BIN_DIR+0xb4>
 128:	80 95       	com	r24
 12a:	82 23       	and	r24, r18
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	08 95       	ret
 130:	21 b3       	in	r18, 0x11	; 17
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_SET_BIN_DIR+0xd0>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_SET_BIN_DIR+0xcc>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	81 bb       	out	0x11, r24	; 17
 146:	08 95       	ret

00000148 <DIO_SET_BIN_VAL>:
		break;
	}
}
void DIO_SET_BIN_VAL(uint8 port,uint8 pin,uint8 val)
{
	switch(port)
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	01 f1       	breq	.+64     	; 0x18c <DIO_SET_BIN_VAL+0x44>
 14c:	30 f0       	brcs	.+12     	; 0x15a <DIO_SET_BIN_VAL+0x12>
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	b1 f1       	breq	.+108    	; 0x1be <DIO_SET_BIN_VAL+0x76>
 152:	83 30       	cpi	r24, 0x03	; 3
 154:	09 f4       	brne	.+2      	; 0x158 <DIO_SET_BIN_VAL+0x10>
 156:	4c c0       	rjmp	.+152    	; 0x1f0 <DIO_SET_BIN_VAL+0xa8>
 158:	08 95       	ret
	{
		case DIO_PORTA:
		if(val==DIO_BIN_HIGT)
 15a:	41 30       	cpi	r20, 0x01	; 1
 15c:	59 f4       	brne	.+22     	; 0x174 <DIO_SET_BIN_VAL+0x2c>
		   SET_BIT(PORTA,pin);
 15e:	2b b3       	in	r18, 0x1b	; 27
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SET_BIN_VAL+0x22>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SET_BIN_VAL+0x1e>
 16e:	82 2b       	or	r24, r18
 170:	8b bb       	out	0x1b, r24	; 27
 172:	08 95       	ret
		else
		   CLR_BIT(PORTA,pin);
 174:	2b b3       	in	r18, 0x1b	; 27
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_SET_BIN_VAL+0x38>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_SET_BIN_VAL+0x34>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	08 95       	ret
		break;
		
		case DIO_PORTB:
		if(val==DIO_BIN_HIGT)
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	59 f4       	brne	.+22     	; 0x1a6 <DIO_SET_BIN_VAL+0x5e>
		   SET_BIT(PORTB,pin);
 190:	28 b3       	in	r18, 0x18	; 24
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_SET_BIN_VAL+0x54>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_SET_BIN_VAL+0x50>
 1a0:	82 2b       	or	r24, r18
 1a2:	88 bb       	out	0x18, r24	; 24
 1a4:	08 95       	ret
		else
		   CLR_BIT(PORTB,pin);
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SET_BIN_VAL+0x6a>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SET_BIN_VAL+0x66>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	08 95       	ret
		break;
		
		case DIO_PORTC:
		if(val==DIO_BIN_HIGT)
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	59 f4       	brne	.+22     	; 0x1d8 <DIO_SET_BIN_VAL+0x90>
		   SET_BIT(PORTC,pin);
 1c2:	25 b3       	in	r18, 0x15	; 21
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_SET_BIN_VAL+0x86>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_SET_BIN_VAL+0x82>
 1d2:	82 2b       	or	r24, r18
 1d4:	85 bb       	out	0x15, r24	; 21
 1d6:	08 95       	ret
		else
		   CLR_BIT(PORTC,pin);
 1d8:	25 b3       	in	r18, 0x15	; 21
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SET_BIN_VAL+0x9c>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SET_BIN_VAL+0x98>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	85 bb       	out	0x15, r24	; 21
 1ee:	08 95       	ret
		break;
		
		case DIO_PORTD:
		if(val==DIO_BIN_HIGT)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	59 f4       	brne	.+22     	; 0x20a <DIO_SET_BIN_VAL+0xc2>
		   SET_BIT(PORTD,pin);
 1f4:	22 b3       	in	r18, 0x12	; 18
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_SET_BIN_VAL+0xb8>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_SET_BIN_VAL+0xb4>
 204:	82 2b       	or	r24, r18
 206:	82 bb       	out	0x12, r24	; 18
 208:	08 95       	ret
		else
		   CLR_BIT(PORTD,pin);
 20a:	22 b3       	in	r18, 0x12	; 18
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_SET_BIN_VAL+0xce>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_SET_BIN_VAL+0xca>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	82 bb       	out	0x12, r24	; 18
 220:	08 95       	ret

00000222 <LCD_writeCommand>:
	
	#endif
}

void LCD_writeCommand(uint8 cmd)
{
 222:	cf 93       	push	r28
 224:	c8 2f       	mov	r28, r24
	DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_RS_PIN,DIO_BIN_LOW);
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
	DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_RW_PIN,DIO_BIN_LOW);
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
	DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_BIN_LOW);
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	63 e0       	ldi	r22, 0x03	; 3
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
	
	LCD_write_port=(cmd&(0xf0))|(LCD_write_port&(0x0f));
 244:	8b b3       	in	r24, 0x1b	; 27
 246:	9c 2f       	mov	r25, r28
 248:	90 7f       	andi	r25, 0xF0	; 240
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	89 2b       	or	r24, r25
 24e:	8b bb       	out	0x1b, r24	; 27
	
	
	DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_BIN_HIGT);
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	63 e0       	ldi	r22, 0x03	; 3
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	8f e9       	ldi	r24, 0x9F	; 159
 25c:	9f e0       	ldi	r25, 0x0F	; 15
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_writeCommand+0x3c>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_writeCommand+0x42>
 264:	00 00       	nop
	_delay_ms(1);
	DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_BIN_LOW);
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
	
	LCD_write_port=(cmd<<4)|(LCD_write_port&(0x0f));
 270:	20 e1       	ldi	r18, 0x10	; 16
 272:	c2 9f       	mul	r28, r18
 274:	c0 01       	movw	r24, r0
 276:	11 24       	eor	r1, r1
 278:	9b b3       	in	r25, 0x1b	; 27
 27a:	9f 70       	andi	r25, 0x0F	; 15
 27c:	89 2b       	or	r24, r25
 27e:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_BIN_HIGT);
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	63 e0       	ldi	r22, 0x03	; 3
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
 28a:	8f e9       	ldi	r24, 0x9F	; 159
 28c:	9f e0       	ldi	r25, 0x0F	; 15
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCD_writeCommand+0x6c>
 292:	00 c0       	rjmp	.+0      	; 0x294 <LCD_writeCommand+0x72>
 294:	00 00       	nop
	_delay_ms(1);
	DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_BIN_LOW);
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	63 e0       	ldi	r22, 0x03	; 3
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
 2a0:	8f e1       	ldi	r24, 0x1F	; 31
 2a2:	9e e4       	ldi	r25, 0x4E	; 78
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_writeCommand+0x82>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_writeCommand+0x88>
 2aa:	00 00       	nop
	
	_delay_ms(5);
			
}
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <LCD_init>:
	LCD_writeCommand(0x06);  /* left to right */
	LCD_writeCommand(0x0c);  /* cursor off */
	LCD_writeCommand(0x02);  /* start from first */
	_delay_ms(100);
	#elif LCD_MODE ==4
	DIO_SET_BIN_DIR(LCD_4BIT_CMD_PORT,LCD_RS_PIN,DIO_BIN_OUTPUT);
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SET_BIN_DIR>
	DIO_SET_BIN_DIR(LCD_4BIT_CMD_PORT,LCD_RW_PIN,DIO_BIN_OUTPUT);
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	62 e0       	ldi	r22, 0x02	; 2
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SET_BIN_DIR>
	DIO_SET_BIN_DIR(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_BIN_OUTPUT);
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	63 e0       	ldi	r22, 0x03	; 3
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SET_BIN_DIR>
	
	DIO_SET_BIN_DIR(LCD_4BIT_DATA_PORT,D4_PIN,DIO_BIN_OUTPUT);
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	64 e0       	ldi	r22, 0x04	; 4
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SET_BIN_DIR>
	DIO_SET_BIN_DIR(LCD_4BIT_DATA_PORT,D5_PIN,DIO_BIN_OUTPUT);
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	65 e0       	ldi	r22, 0x05	; 5
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SET_BIN_DIR>
	DIO_SET_BIN_DIR(LCD_4BIT_DATA_PORT,D6_PIN,DIO_BIN_OUTPUT);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	66 e0       	ldi	r22, 0x06	; 6
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SET_BIN_DIR>
	DIO_SET_BIN_DIR(LCD_4BIT_DATA_PORT,D7_PIN,DIO_BIN_OUTPUT);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	67 e0       	ldi	r22, 0x07	; 7
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SET_BIN_DIR>
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	81 ee       	ldi	r24, 0xE1	; 225
 2fa:	94 e0       	ldi	r25, 0x04	; 4
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <LCD_init+0x4c>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_init+0x56>
 306:	00 00       	nop
	
	_delay_ms(100);
	
	LCD_writeCommand(0x33);
 308:	83 e3       	ldi	r24, 0x33	; 51
 30a:	0e 94 11 01 	call	0x222	; 0x222 <LCD_writeCommand>
	LCD_writeCommand(0x32);
 30e:	82 e3       	ldi	r24, 0x32	; 50
 310:	0e 94 11 01 	call	0x222	; 0x222 <LCD_writeCommand>
	LCD_writeCommand(0x28);
 314:	88 e2       	ldi	r24, 0x28	; 40
 316:	0e 94 11 01 	call	0x222	; 0x222 <LCD_writeCommand>
	
	LCD_writeCommand(0x0c);
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	0e 94 11 01 	call	0x222	; 0x222 <LCD_writeCommand>
	LCD_writeCommand(0x01);
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 11 01 	call	0x222	; 0x222 <LCD_writeCommand>
	LCD_writeCommand(0x06); 
 326:	86 e0       	ldi	r24, 0x06	; 6
 328:	0e 94 11 01 	call	0x222	; 0x222 <LCD_writeCommand>
	LCD_writeCommand(0x02);
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	0e 94 11 01 	call	0x222	; 0x222 <LCD_writeCommand>
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	81 ee       	ldi	r24, 0xE1	; 225
 336:	94 e0       	ldi	r25, 0x04	; 4
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <LCD_init+0x88>
 340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_init+0x92>
 342:	00 00       	nop
 344:	08 95       	ret

00000346 <LCD_writeChar>:
	_delay_ms(5);
			
}

void LCD_writeChar(uint8 chr)
{
 346:	cf 93       	push	r28
 348:	c8 2f       	mov	r28, r24
		DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_RS_PIN,DIO_BIN_HIGT);
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
		DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_RW_PIN,DIO_BIN_LOW);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
		DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_BIN_LOW);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	63 e0       	ldi	r22, 0x03	; 3
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
		
		LCD_write_port=(chr&(0xf0))|(LCD_write_port&(0x0f));
 368:	8b b3       	in	r24, 0x1b	; 27
 36a:	9c 2f       	mov	r25, r28
 36c:	90 7f       	andi	r25, 0xF0	; 240
 36e:	8f 70       	andi	r24, 0x0F	; 15
 370:	89 2b       	or	r24, r25
 372:	8b bb       	out	0x1b, r24	; 27
		
		
		DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_BIN_HIGT);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	63 e0       	ldi	r22, 0x03	; 3
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
 37e:	8f e9       	ldi	r24, 0x9F	; 159
 380:	9f e0       	ldi	r25, 0x0F	; 15
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_writeChar+0x3c>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_writeChar+0x42>
 388:	00 00       	nop
		_delay_ms(1);
		DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_BIN_LOW);
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	63 e0       	ldi	r22, 0x03	; 3
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
		
		LCD_write_port=(chr<<4)|(LCD_write_port&(0x0f));
 394:	20 e1       	ldi	r18, 0x10	; 16
 396:	c2 9f       	mul	r28, r18
 398:	c0 01       	movw	r24, r0
 39a:	11 24       	eor	r1, r1
 39c:	9b b3       	in	r25, 0x1b	; 27
 39e:	9f 70       	andi	r25, 0x0F	; 15
 3a0:	89 2b       	or	r24, r25
 3a2:	8b bb       	out	0x1b, r24	; 27
		
		DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_BIN_HIGT);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	63 e0       	ldi	r22, 0x03	; 3
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
 3ae:	8f e9       	ldi	r24, 0x9F	; 159
 3b0:	9f e0       	ldi	r25, 0x0F	; 15
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_writeChar+0x6c>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_writeChar+0x72>
 3b8:	00 00       	nop
		_delay_ms(1);
		DIO_SET_BIN_VAL(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_BIN_LOW);
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	63 e0       	ldi	r22, 0x03	; 3
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_SET_BIN_VAL>
 3c4:	8f e1       	ldi	r24, 0x1F	; 31
 3c6:	9e e4       	ldi	r25, 0x4E	; 78
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <LCD_writeChar+0x82>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <LCD_writeChar+0x88>
 3ce:	00 00       	nop
		
		_delay_ms(5);
		
}
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <LCD_clear>:

void LCD_clear(void)
{
	LCD_writeCommand(0x01);
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 11 01 	call	0x222	; 0x222 <LCD_writeCommand>
 3da:	08 95       	ret

000003dc <main>:
#include "LCD.h"
#include "UART.h"


int main(void)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	2f 97       	sbiw	r28, 0x0f	; 15
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
    LCD_init();
 3f0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_init>
	UART_init();
 3f4:	0e 94 36 02 	call	0x46c	; 0x46c <UART_init>
	uint8 data1=-1;
	uint8 d[15];
	uint32 coun=0;
 3f8:	c1 2c       	mov	r12, r1
 3fa:	d1 2c       	mov	r13, r1
 3fc:	76 01       	movw	r14, r12
    while (1) 
    {
		data1=UART_RX();
 3fe:	0e 94 4b 02 	call	0x496	; 0x496 <UART_RX>
 402:	18 2f       	mov	r17, r24
		if(data1>=48&&data1<=123)
 404:	80 ed       	ldi	r24, 0xD0	; 208
 406:	81 0f       	add	r24, r17
 408:	8c 34       	cpi	r24, 0x4C	; 76
 40a:	a8 f4       	brcc	.+42     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		{
			d[coun%15]=data1;
 40c:	c7 01       	movw	r24, r14
 40e:	b6 01       	movw	r22, r12
 410:	2f e0       	ldi	r18, 0x0F	; 15
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	0e 94 4f 02 	call	0x49e	; 0x49e <__udivmodsi4>
 41c:	e1 e0       	ldi	r30, 0x01	; 1
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	ec 0f       	add	r30, r28
 422:	fd 1f       	adc	r31, r29
 424:	e6 0f       	add	r30, r22
 426:	f7 1f       	adc	r31, r23
 428:	10 83       	st	Z, r17
			coun++;
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	c8 1a       	sub	r12, r24
 42e:	d8 0a       	sbc	r13, r24
 430:	e8 0a       	sbc	r14, r24
 432:	f8 0a       	sbc	r15, r24
 434:	e4 cf       	rjmp	.-56     	; 0x3fe <main+0x22>
		}
		else
		{
			LCD_clear();
 436:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_clear>
			for(uint8 i=0;i<coun;i++)
 43a:	10 e0       	ldi	r17, 0x00	; 0
 43c:	0a c0       	rjmp	.+20     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			{
				LCD_writeChar(d[i]);
 43e:	e1 e0       	ldi	r30, 0x01	; 1
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	ec 0f       	add	r30, r28
 444:	fd 1f       	adc	r31, r29
 446:	e1 0f       	add	r30, r17
 448:	f1 1d       	adc	r31, r1
 44a:	80 81       	ld	r24, Z
 44c:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_writeChar>
			coun++;
		}
		else
		{
			LCD_clear();
			for(uint8 i=0;i<coun;i++)
 450:	1f 5f       	subi	r17, 0xFF	; 255
 452:	81 2f       	mov	r24, r17
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	a0 e0       	ldi	r26, 0x00	; 0
 458:	b0 e0       	ldi	r27, 0x00	; 0
 45a:	8c 15       	cp	r24, r12
 45c:	9d 05       	cpc	r25, r13
 45e:	ae 05       	cpc	r26, r14
 460:	bf 05       	cpc	r27, r15
 462:	68 f3       	brcs	.-38     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			{
				LCD_writeChar(d[i]);
			}
			coun=0;
 464:	c1 2c       	mov	r12, r1
 466:	d1 2c       	mov	r13, r1
 468:	76 01       	movw	r14, r12
 46a:	c9 cf       	rjmp	.-110    	; 0x3fe <main+0x22>

0000046c <UART_init>:
	while(str[i]!='\0')
	{
		UART_TX(str[i]);
		i++;
	}
}
 46c:	40 e0       	ldi	r20, 0x00	; 0
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	83 e0       	ldi	r24, 0x03	; 3
 472:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SET_BIN_DIR>
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SET_BIN_DIR>
 480:	87 e6       	ldi	r24, 0x67	; 103
 482:	89 b9       	out	0x09, r24	; 9
 484:	8a b1       	in	r24, 0x0a	; 10
 486:	88 60       	ori	r24, 0x08	; 8
 488:	8a b9       	out	0x0a, r24	; 10
 48a:	8a b1       	in	r24, 0x0a	; 10
 48c:	80 61       	ori	r24, 0x10	; 16
 48e:	8a b9       	out	0x0a, r24	; 10
 490:	86 e8       	ldi	r24, 0x86	; 134
 492:	80 bd       	out	0x20, r24	; 32
 494:	08 95       	ret

00000496 <UART_RX>:

uint8 UART_RX(void)
{
    while(GET_BIT(UCSRA,7)==0);
 496:	5f 9b       	sbis	0x0b, 7	; 11
 498:	fe cf       	rjmp	.-4      	; 0x496 <UART_RX>
	
	return UDR;	
 49a:	8c b1       	in	r24, 0x0c	; 12
 49c:	08 95       	ret

0000049e <__udivmodsi4>:
 49e:	a1 e2       	ldi	r26, 0x21	; 33
 4a0:	1a 2e       	mov	r1, r26
 4a2:	aa 1b       	sub	r26, r26
 4a4:	bb 1b       	sub	r27, r27
 4a6:	fd 01       	movw	r30, r26
 4a8:	0d c0       	rjmp	.+26     	; 0x4c4 <__udivmodsi4_ep>

000004aa <__udivmodsi4_loop>:
 4aa:	aa 1f       	adc	r26, r26
 4ac:	bb 1f       	adc	r27, r27
 4ae:	ee 1f       	adc	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	a2 17       	cp	r26, r18
 4b4:	b3 07       	cpc	r27, r19
 4b6:	e4 07       	cpc	r30, r20
 4b8:	f5 07       	cpc	r31, r21
 4ba:	20 f0       	brcs	.+8      	; 0x4c4 <__udivmodsi4_ep>
 4bc:	a2 1b       	sub	r26, r18
 4be:	b3 0b       	sbc	r27, r19
 4c0:	e4 0b       	sbc	r30, r20
 4c2:	f5 0b       	sbc	r31, r21

000004c4 <__udivmodsi4_ep>:
 4c4:	66 1f       	adc	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	1a 94       	dec	r1
 4ce:	69 f7       	brne	.-38     	; 0x4aa <__udivmodsi4_loop>
 4d0:	60 95       	com	r22
 4d2:	70 95       	com	r23
 4d4:	80 95       	com	r24
 4d6:	90 95       	com	r25
 4d8:	9b 01       	movw	r18, r22
 4da:	ac 01       	movw	r20, r24
 4dc:	bd 01       	movw	r22, r26
 4de:	cf 01       	movw	r24, r30
 4e0:	08 95       	ret

000004e2 <_exit>:
 4e2:	f8 94       	cli

000004e4 <__stop_program>:
 4e4:	ff cf       	rjmp	.-2      	; 0x4e4 <__stop_program>
